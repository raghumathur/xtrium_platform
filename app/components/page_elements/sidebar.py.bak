import streamlit as st
from app.ui.design_system.components import get_global_styles
from app.ui.navigation import get_sidebar_links
from app.ui.theme import Colors, Spacing, FontSizes

# Component key prefixes to ensure uniqueness
PREFIX_WORKSPACE = "workspace"
PREFIX_FILTER = "filter"
PREFIX_NAV = "nav"
PREFIX_SUPPORT = "support"
PREFIX_COLLAB = "collab"

def get_unique_key(*parts: str) -> str:
    """Generate a unique key for Streamlit components."""
    return "_".join([str(part) for part in parts if part])

def render_workspace_selector():
    """Render the workspace selector dropdown."""
    workspaces = ["Default", "Project Alpha", "Client Beta", "Research"]
    st.sidebar.selectbox(
        "Active Workspace",
        workspaces,
        key=get_unique_key(PREFIX_WORKSPACE, "selector", st.session_state.get("active_tab", "home")),
        label_visibility="visible"
    )

def render_quick_links():
    """Render quick navigation links in the sidebar."""
    # Get quick links for current tab
    if "active_tab" not in st.session_state:
        st.session_state.active_tab = "discovery"
    
    links = get_sidebar_links(st.session_state.active_tab)
    
    # Initialize states if not present
    if "active_section" not in st.session_state:
        st.session_state.active_section = None
    if "sustainability_page" not in st.session_state:
        st.session_state.sustainability_page = "benchmarking"
    
    # Add custom link styles
    st.markdown("""
        <style>
        .sidebar-link {
            display: block;
            width: 100%;
            padding: 0.5rem 1rem;
            text-align: left;
            color: inherit;
            font-weight: normal;
            text-decoration: none !important;
            transition: all 0.2s ease;
            margin-bottom: 0.25rem;
            border-radius: 4px;
            cursor: pointer;
        }
        .sidebar-link:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: #1E90FF;
            text-decoration: none !important;
        }
        .sidebar-link.active {
            background: rgba(255, 255, 255, 0.15);
            color: #1E90FF;
            font-weight: 500;
        }
        </style>
    """, unsafe_allow_html=True)
    
    # Create HTML links
    active_tab = st.session_state.active_tab
    links_html = []
    
    for label, icon, section in links:
        link_class = "sidebar-link"
        links_html.append(
            f'<a href="javascript:void(0)" class="{link_class}" '
            f'onclick="setTimeout(() => {{'
            f'const el = document.getElementById(\'{section}\');'
            f'if (el) el.scrollIntoView({{behavior: \'smooth\', block: \'start\'}});'
            f'}}, 100)">{icon} {label}</a>'
        )
    
    st.sidebar.markdown("".join(links_html), unsafe_allow_html=True)

def render_filter_section():
    """Render smart filters in the sidebar."""
    if st.session_state.active_tab == "discovery":
        with st.sidebar.expander("Smart Filters", expanded=True):
            active_tab = st.session_state.active_tab
            st.selectbox(
                "Material Type",
                ["All", "Metals", "Polymers", "Ceramics"],
                key=get_unique_key(PREFIX_FILTER, "material_type", active_tab)
            )
            st.selectbox(
                "Industry",
                ["All", "Automotive", "Aerospace", "Medical"],
                key=get_unique_key(PREFIX_FILTER, "industry", active_tab)
            )
            st.selectbox(
                "Properties",
                ["All", "Mechanical", "Thermal", "Electrical"],
                key=get_unique_key(PREFIX_FILTER, "properties", active_tab)
            )

def render_collaborators():
    """Render the collaborators section."""
    status_map = {
        "online": "<div class='status-dot online'>‚óè</div>",
        "away": "<div class='status-dot away'>‚óè</div>",
        "offline": "<div class='status-dot offline'>‚óè</div>"
    }
    
    collaborators = [
        {"name": "John D.", "status": "online", "role": "Project Lead"},
        {"name": "Sarah M.", "status": "away", "role": "Materials Scientist"},
        {"name": "Alex K.", "status": "online", "role": "Data Analyst"},
        {"name": "Maria R.", "status": "offline", "role": "Supply Chain Specialist"}
    ]
    
    active_tab = st.session_state.get("active_tab", "home")
    expander = st.sidebar.expander("Active Collaborators", expanded=True)
    
    with expander:
        for i, collab in enumerate(collaborators):
            if i > 0:
                expander.markdown(
                    f"<div style='border-top: 1px solid {Colors.DIVIDER}; margin: {Spacing.SM} 0;'></div>",
                    unsafe_allow_html=True
                )
            
            cols = expander.columns([0.1, 0.1, 0.8])
            cols[0].markdown(status_map[collab['status']], unsafe_allow_html=True)
            
            initials = ''.join(word[0].upper() for word in collab["name"].split())
            cols[1].markdown(f"<div style='margin-top: -10px;'><h2>{initials}</h2></div>", unsafe_allow_html=True)
            
            cols[2].markdown(
                f"<div style='margin-top: {Spacing.XS}; margin-left: {Spacing.MD};'>"
                f"<div style='font-size: {FontSizes.BASE}; margin-bottom: {Spacing.XS};'>"
                f"<span>{collab['name']}</span></div>"
                f"<div style='font-size: {FontSizes.XS}; font-style: italic; color: {Colors.TEXT_SECONDARY};'>{collab['role']}</div>"
                f"</div>",
                unsafe_allow_html=True
            )

def render_support():
    """Render support links."""
    st.sidebar.markdown("---")
    support_links = [
        ("Help Center", "‚ùì"),
        ("Submit Feedback", "üìù"),
        ("Feature Requests", "‚ú®")
    ]
    active_tab = st.session_state.get("active_tab", "home")
    for i, (label, icon) in enumerate(support_links):
        st.sidebar.button(
            f"{icon} {label}",
            key=get_unique_key(PREFIX_SUPPORT, f"link_{i}", active_tab)
        )

def render_logo():
    """Render the logo."""
    st.sidebar.image(
        "assets/images/xtrium.png",
        width=280
    )
    st.sidebar.markdown(
        "<p style='text-align: center; color: #FFFFFF; margin-top: -10px; font-size: 0.9em;'>"
        "Where Materials meet Applications</p>",
        unsafe_allow_html=True
    )

def render_sidebar():
    """Render the sidebar with all its components."""
    st.sidebar.markdown(get_global_styles(), unsafe_allow_html=True)
    
    render_logo()
    st.sidebar.markdown("<br>", unsafe_allow_html=True)
    render_workspace_selector()
    st.sidebar.markdown("---")
    render_quick_links()
    st.sidebar.markdown("---")
    render_filter_section()
    st.sidebar.markdown("---")
    render_collaborators()
    render_support()
